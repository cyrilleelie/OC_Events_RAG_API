# app_streamlit.py

import streamlit as st
from puls_events_rag.rag_chain import create_rag_chain

# --- Configuration de la page Streamlit ---
st.set_page_config(
    page_title="Puls-Events Chatbot",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ Chatbot pour les √âv√©nements Culturels")
st.caption("Posez vos questions sur les √©v√©nements de la m√©tropole nantaise.")

# --- Mise en cache de la cha√Æne RAG ---
# Streamlit relance le script √† chaque interaction de l'utilisateur.
# Pour √©viter de recharger les lourds mod√®les √† chaque fois,
# on utilise le d√©corateur @st.cache_resource.
# La cha√Æne RAG sera cr√©√©e une seule fois et r√©utilis√©e.
@st.cache_resource
def load_rag_chain():
    """Charge la cha√Æne RAG et la met en cache."""
    return create_rag_chain()

# On charge la cha√Æne (cette op√©ration sera lente la premi√®re fois, puis instantan√©e)
rag_chain = load_rag_chain()

# --- Interface de chat ---

# Initialiser l'historique de chat dans l'√©tat de la session
if "messages" not in st.session_state:
    st.session_state.messages = []

# Afficher les messages de l'historique
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Zone de saisie pour la question de l'utilisateur
if user_question := st.chat_input("Que cherchez-vous ?"):
    # Ajouter la question de l'utilisateur √† l'historique et l'afficher
    st.session_state.messages.append({"role": "user", "content": user_question})
    with st.chat_message("user"):
        st.markdown(user_question)

    # Afficher la r√©ponse du chatbot
    with st.chat_message("assistant"):
        # Afficher un spinner pendant que le RAG travaille
        with st.spinner("Je cherche la meilleure r√©ponse..."):
            response = rag_chain.invoke(user_question)
            st.markdown(response)
    
    # Ajouter la r√©ponse du chatbot √† l'historique
    st.session_state.messages.append({"role": "assistant", "content": response})